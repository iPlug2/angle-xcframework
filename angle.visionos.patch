diff --git a/src/common/apple/apple_platform.h b/src/common/apple/apple_platform.h
index cee7b44d6..718c9b9f8 100644
--- a/src/common/apple/apple_platform.h
+++ b/src/common/apple/apple_platform.h
@@ -18,7 +18,8 @@
      (ANGLE_PLATFORM_WATCHOS && !ANGLE_PLATFORM_IOS_FAMILY_SIMULATOR &&       \
       __WATCH_OS_VERSION_MIN_REQUIRED >= 80000) ||                            \
      (TARGET_OS_TV && !ANGLE_PLATFORM_IOS_FAMILY_SIMULATOR &&                 \
-      __TV_OS_VERSION_MIN_REQUIRED >= 150000)) &&                             \
+      __TV_OS_VERSION_MIN_REQUIRED >= 150000) ||                              \
+     (TARGET_OS_VISION && !ANGLE_PLATFORM_IOS_FAMILY_SIMULATOR)) &&           \
     (defined(__has_include) && __has_include(<Metal/MTLResource_Private.h>))
 #    define ANGLE_HAVE_MTLRESOURCE_SET_OWNERSHIP_IDENTITY 1
 #else
diff --git a/src/common/apple_platform_utils.h b/src/common/apple_platform_utils.h
index 23c27eaee..499f04621 100644
--- a/src/common/apple_platform_utils.h
+++ b/src/common/apple_platform_utils.h
@@ -20,30 +20,30 @@
 #if TARGET_OS_MACCATALYST
 // ANGLE_APPLE_AVAILABLE_XCI: check if either of the 3 platforms (OSX/Catalyst/iOS) min verions is
 // available:
-#    define ANGLE_APPLE_AVAILABLE_XCI(macVer, macCatalystVer, iOSVer) \
-        @available(macOS macVer, macCatalyst macCatalystVer, iOS iOSVer, *)
+#    define ANGLE_APPLE_AVAILABLE_XCI(macVer, macCatalystVer, iOSVer, visionOSVer) \
+        @available(macOS macVer, macCatalyst macCatalystVer, iOS iOSVer, visionOS visionOSVer, *)
 // ANGLE_APPLE_AVAILABLE_XC: check if either of the 2 platforms (OSX/Catalyst) min verions is
 // available:
 #    define ANGLE_APPLE_AVAILABLE_XC(macVer, macCatalystVer) \
         @available(macOS macVer, macCatalyst macCatalystVer, *)
 // ANGLE_APPLE_AVAILABLE_CI: check if either of the 2 platforms (Catalyst/iOS) min verions is
 // available:
-#    define ANGLE_APPLE_AVAILABLE_CI(macCatalystVer, iOSVer) \
-        @available(macCatalyst macCatalystVer, iOS iOSVer, *)
+#    define ANGLE_APPLE_AVAILABLE_CI(macCatalystVer, iOSVer, visionOSVer) \
+        @available(macCatalyst macCatalystVer, iOS iOSVer, visionOS visionOSVer, *)
 #else
-#    define ANGLE_APPLE_AVAILABLE_XCI(macVer, macCatalystVer, iOSVer) \
-        ANGLE_APPLE_AVAILABLE_XI(macVer, iOSVer)
+#    define ANGLE_APPLE_AVAILABLE_XCI(macVer, macCatalystVer, iOSVer, visionOSVer) \
+        ANGLE_APPLE_AVAILABLE_XI(macVer, iOSVer, visionOSVer)
 
 #    define ANGLE_APPLE_AVAILABLE_XC(macVer, macCatalystVer) @available(macOS macVer, *)
-#    define ANGLE_APPLE_AVAILABLE_CI(macCatalystVer, iOSVer) @available(iOS iOSVer, tvOS iOSVer, *)
+#    define ANGLE_APPLE_AVAILABLE_CI(macCatalystVer, iOSVer, visionOSVer) @available(iOS iOSVer, tvOS iOSVer, visionOS visionOSVer, *)
 #endif
 
 // ANGLE_APPLE_AVAILABLE_XI: check if either of the 2 platforms (OSX/iOS) min verions is available:
-#define ANGLE_APPLE_AVAILABLE_XI(macVer, iOSVer) \
-    @available(macOS macVer, iOS iOSVer, tvOS iOSVer, *)
+#define ANGLE_APPLE_AVAILABLE_XI(macVer, iOSVer, visionOSVer) \
+    @available(macOS macVer, iOS iOSVer, tvOS iOSVer, visionOS visionOSVer, *)
 
 // ANGLE_APPLE_AVAILABLE_I: check if a particular iOS version is available
-#define ANGLE_APPLE_AVAILABLE_I(iOSVer) @available(iOS iOSVer, tvOS iOSVer, *)
+#define ANGLE_APPLE_AVAILABLE_I(iOSVer, visionOSVer) @available(iOS iOSVer, tvOS iOSVer, visionOS visionOSVer, *)
 
 #if TARGET_OS_IPHONE
 #    if !defined(__IPHONE_11_0)
diff --git a/src/common/apple_platform_utils.mm b/src/common/apple_platform_utils.mm
index 42d663a80..e35ae31ed 100644
--- a/src/common/apple_platform_utils.mm
+++ b/src/common/apple_platform_utils.mm
@@ -78,9 +78,9 @@ bool IsMetalRendererAvailable()
 
     // We only support macos 10.13+ and 11 for now. Since they are requirements for Metal 2.0.
 #if TARGET_OS_SIMULATOR
-    if (ANGLE_APPLE_AVAILABLE_XCI(10.13, 13.1, 13))
+    if (ANGLE_APPLE_AVAILABLE_XCI(10.13, 13.1, 13, 1.0))
 #else
-    if (ANGLE_APPLE_AVAILABLE_XCI(10.13, 13.1, 11))
+    if (ANGLE_APPLE_AVAILABLE_XCI(10.13, 13.1, 11, 1.0))
 #endif
     {
         if (!queriedSystemDevice)
@@ -98,7 +98,7 @@ bool IsMetalRendererAvailable()
 #if defined(ANGLE_PLATFORM_MACOS) || defined(ANGLE_PLATFORM_MACCATALYST)
                 // Old Macs, such as MacBookPro11,4, cannot use ANGLE's Metal backend.
                 // This check can be removed once they are no longer supported.
-                if (ANGLE_APPLE_AVAILABLE_XCI(10.15, 13.1, 13))
+                if (ANGLE_APPLE_AVAILABLE_XCI(10.15, 13.1, 13, 1.0))
                 {
                     if ([device supportsFamily:MTLGPUFamilyMac2])
                         gpuFamilySufficient = true;
diff --git a/src/common/platform.h b/src/common/platform.h
index 85da528fe..5a284de9b 100644
--- a/src/common/platform.h
+++ b/src/common/platform.h
@@ -140,6 +140,8 @@
 #            define ANGLE_PLATFORM_WATCHOS 1
 #        elif TARGET_OS_TV
 #            define ANGLE_PLATFORM_APPLETV 1
+#        elif TARGET_OS_VISION
+#            define ANGLE_PLATFORM_VISION 1
 #        endif
 #    endif
 #    // Identify Metal API >= what shipped on macOS Catalina.
diff --git a/src/libANGLE/renderer/metal/ContextMtl.mm b/src/libANGLE/renderer/metal/ContextMtl.mm
index 2575266dc..cc7860f95 100644
--- a/src/libANGLE/renderer/metal/ContextMtl.mm
+++ b/src/libANGLE/renderer/metal/ContextMtl.mm
@@ -219,7 +219,7 @@ ContextMtl::ContextMtl(const gl::State &state,
       mProvokingVertexHelper(this),
       mContextDevice(GetOwnershipIdentity(attribs))
 {
-    if (@available(iOS 12.0, macOS 10.14, *))
+    if (@available(iOS 12.0, macOS 10.14, visionOS 1.0, *))
     {
         mHasMetalSharedEvents = true;
     }
diff --git a/src/libANGLE/renderer/metal/DisplayMtl.mm b/src/libANGLE/renderer/metal/DisplayMtl.mm
index 39457084d..3388753f6 100644
--- a/src/libANGLE/renderer/metal/DisplayMtl.mm
+++ b/src/libANGLE/renderer/metal/DisplayMtl.mm
@@ -759,7 +759,7 @@ void DisplayMtl::ensureCapsInitialized() const
     // for now. http://anglebug.com/42263403
 
     // NOTE(kpiddington): This seems to be fixed in macOS Monterey
-    if (ANGLE_APPLE_AVAILABLE_XCI(12.0, 15.0, 15.0))
+    if (ANGLE_APPLE_AVAILABLE_XCI(12.0, 15.0, 15.0, 1.0))
     {
         mNativeCaps.maxAliasedPointSize = 511;
     }
@@ -918,7 +918,7 @@ void DisplayMtl::ensureCapsInitialized() const
     mNativeLimitations.squarePvrtc1 = true;
 
     // Older Metal does not support compressed formats for TEXTURE_3D target.
-    if (ANGLE_APPLE_AVAILABLE_XCI(10.15, 13.1, 13.0))
+    if (ANGLE_APPLE_AVAILABLE_XCI(10.15, 13.1, 13.0, 1.0))
     {
         mNativeLimitations.noCompressedTexture3D = !supportsEitherGPUFamily(3, 1);
     }
@@ -955,13 +955,13 @@ void DisplayMtl::initializeExtensions() const
     mNativeExtensions.copyCompressedTextureCHROMIUM = false;
 
 #if !ANGLE_PLATFORM_WATCHOS
-    if (@available(iOS 14.0, macOS 10.11, macCatalyst 14.0, tvOS 16.0, *))
+    if (@available(iOS 14.0, macOS 10.11, macCatalyst 14.0, tvOS 16.0, visionOS 1.0, *))
     {
         mNativeExtensions.textureMirrorClampToEdgeEXT = true;
     }
 #endif
 
-    if (ANGLE_APPLE_AVAILABLE_XCI(10.11, 13.1, 11.0))
+    if (ANGLE_APPLE_AVAILABLE_XCI(10.11, 13.1, 11.0, 1.0))
     {
         mNativeExtensions.depthClampEXT = true;
     }
@@ -1022,7 +1022,7 @@ void DisplayMtl::initializeExtensions() const
 
     mNativeExtensions.sampleVariablesOES = true;
 
-    if (ANGLE_APPLE_AVAILABLE_XCI(11.0, 14.0, 14.0))
+    if (ANGLE_APPLE_AVAILABLE_XCI(11.0, 14.0, 14.0, 1.0))
     {
         mNativeExtensions.shaderMultisampleInterpolationOES =
             [mMetalDevice supportsPullModelInterpolation];
@@ -1095,7 +1095,7 @@ void DisplayMtl::initializeExtensions() const
     mNativeExtensions.provokingVertexANGLE = true;
 
     // GL_EXT_blend_func_extended
-    if (ANGLE_APPLE_AVAILABLE_XCI(10.12, 13.1, 11.0))
+    if (ANGLE_APPLE_AVAILABLE_XCI(10.12, 13.1, 11.0, 1.0))
     {
         mNativeExtensions.blendFuncExtendedEXT = true;
         mNativeCaps.maxDualSourceDrawBuffers   = 1;
@@ -1396,7 +1396,7 @@ bool DisplayMtl::supportsEitherGPUFamily(uint8_t iOSFamily, uint8_t macFamily) c
 
 bool DisplayMtl::supportsMetal2_1() const
 {
-    if (ANGLE_APPLE_AVAILABLE_XCI(10.14, 13.1, 12.0))
+    if (ANGLE_APPLE_AVAILABLE_XCI(10.14, 13.1, 12.0, 1.0))
     {
         return true;
     }
@@ -1407,7 +1407,7 @@ bool DisplayMtl::supportsMetal2_1() const
 }
 bool DisplayMtl::supportsMetal2_2() const
 {
-    if (ANGLE_APPLE_AVAILABLE_XCI(10.15, 13.1, 13.0))
+    if (ANGLE_APPLE_AVAILABLE_XCI(10.15, 13.1, 13.0, 1.0))
     {
         return true;
     }
@@ -1422,7 +1422,7 @@ bool DisplayMtl::supports32BitFloatFiltering() const
 #if ((TARGET_OS_OSX && __MAC_OS_X_VERSION_MAX_ALLOWED >= 110000) ||  \
      (TARGET_OS_IOS && __IPHONE_OS_VERSION_MAX_ALLOWED >= 140000) || \
      (TARGET_OS_TV && __TV_OS_VERSION_MAX_ALLOWED >= 160000) || TARGET_OS_VISION)
-    if (@available(macOS 11.0, macCatalyst 14.0, iOS 14.0, tvOS 16.0, *))
+    if (@available(macOS 11.0, macCatalyst 14.0, iOS 14.0, tvOS 16.0, visionOS 1.0, *))
     {
         return [mMetalDevice supports32BitFloatFiltering];
     }
diff --git a/src/libANGLE/renderer/metal/FrameBufferMtl.mm b/src/libANGLE/renderer/metal/FrameBufferMtl.mm
index 8cab198f0..b0463b3a0 100644
--- a/src/libANGLE/renderer/metal/FrameBufferMtl.mm
+++ b/src/libANGLE/renderer/metal/FrameBufferMtl.mm
@@ -688,7 +688,7 @@ gl::FramebufferStatus FramebufferMtl::checkStatus(const gl::Context *context) co
 
 gl::FramebufferStatus FramebufferMtl::checkPackedDepthStencilAttachment() const
 {
-    if (ANGLE_APPLE_AVAILABLE_XCI(10.14, 13.1, 12.0))
+    if (ANGLE_APPLE_AVAILABLE_XCI(10.14, 13.1, 12.0, 1.0))
     {
         // If depth/stencil attachment has depth & stencil bits, then depth & stencil must not have
         // separate attachment. i.e. They must be the same texture or one of them has no
diff --git a/src/libANGLE/renderer/metal/mtl_command_buffer.mm b/src/libANGLE/renderer/metal/mtl_command_buffer.mm
index f1633a6d3..d71a992e3 100644
--- a/src/libANGLE/renderer/metal/mtl_command_buffer.mm
+++ b/src/libANGLE/renderer/metal/mtl_command_buffer.mm
@@ -381,7 +381,7 @@ inline void UseResourceCmd(id<MTLRenderCommandEncoder> encoder, IntermediateComm
     mtl::RenderStages stages = stream->fetch<mtl::RenderStages>();
     ANGLE_UNUSED_VARIABLE(stages);
 #if defined(__IPHONE_13_0) || defined(__MAC_10_15)
-    if (ANGLE_APPLE_AVAILABLE_XCI(10.15, 13.1, 13.0))
+    if (ANGLE_APPLE_AVAILABLE_XCI(10.15, 13.1, 13.0, 1.0))
     {
         [encoder useResource:resource usage:usage stages:stages];
     }
diff --git a/src/libANGLE/renderer/metal/mtl_context_device.mm b/src/libANGLE/renderer/metal/mtl_context_device.mm
index 9916d17fd..557d9d31c 100644
--- a/src/libANGLE/renderer/metal/mtl_context_device.mm
+++ b/src/libANGLE/renderer/metal/mtl_context_device.mm
@@ -131,7 +131,7 @@ void ContextDevice::setOwnerWithIdentity(id<MTLResource> resource) const
 
 bool ContextDevice::hasUnifiedMemory() const
 {
-    if (@available(iOS 13.0, macOS 10.15, macCatalyst 13.1, tvOS 13.0, *))
+    if (@available(iOS 13.0, macOS 10.15, macCatalyst 13.1, tvOS 13.0, visionOS 1.0, *))
     {
         return [get() hasUnifiedMemory];
     }
diff --git a/src/libANGLE/renderer/metal/mtl_format_utils.mm b/src/libANGLE/renderer/metal/mtl_format_utils.mm
index 42ea015fd..f04c6f0b5 100644
--- a/src/libANGLE/renderer/metal/mtl_format_utils.mm
+++ b/src/libANGLE/renderer/metal/mtl_format_utils.mm
@@ -165,7 +165,7 @@ bool Format::isPVRTC() const
 {
     switch (metalFormat)
     {
-#if (TARGET_OS_IOS && !TARGET_OS_MACCATALYST) || \
+#if (TARGET_OS_IOS && !TARGET_OS_MACCATALYST) || TARGET_OS_VISION || \
     (TARGET_OS_OSX && (__MAC_OS_X_VERSION_MAX_ALLOWED >= 110000))
         case MTLPixelFormatPVRTC_RGB_2BPP:
         case MTLPixelFormatPVRTC_RGB_2BPP_sRGB:
diff --git a/src/libANGLE/renderer/metal/mtl_resources.mm b/src/libANGLE/renderer/metal/mtl_resources.mm
index 1b20954c4..0fc9bfe25 100644
--- a/src/libANGLE/renderer/metal/mtl_resources.mm
+++ b/src/libANGLE/renderer/metal/mtl_resources.mm
@@ -433,7 +433,7 @@ Texture::Texture(ContextMtl *context,
         if (memoryLess)
         {
             bool supportsMemoryless = false;
-#if (TARGET_OS_IOS || TARGET_OS_TV) && !TARGET_OS_MACCATALYST
+#if (TARGET_OS_IOS || TARGET_OS_TV || TARGET_OS_VISION) && !TARGET_OS_MACCATALYST
             supportsMemoryless = true;
 #else
             if (ANGLE_APPLE_AVAILABLE_XC(11.0, 14.1))
@@ -510,7 +510,7 @@ Texture::Texture(ContextMtl *context,
             desc.usage |= MTLTextureUsageRenderTarget;
         }
 
-#if (TARGET_OS_IOS || TARGET_OS_TV || TARGET_OS_WATCH) && !TARGET_OS_MACCATALYST
+#if (TARGET_OS_IOS || TARGET_OS_TV || TARGET_OS_WATCH || TARGET_OS_VISION) && !TARGET_OS_MACCATALYST
         desc.resourceOptions = MTLResourceStorageModeShared;
 #else
         desc.resourceOptions = MTLResourceStorageModeManaged;
diff --git a/src/libANGLE/renderer/metal/mtl_utils.mm b/src/libANGLE/renderer/metal/mtl_utils.mm
index 81197f9d1..907079df8 100644
--- a/src/libANGLE/renderer/metal/mtl_utils.mm
+++ b/src/libANGLE/renderer/metal/mtl_utils.mm
@@ -189,7 +189,7 @@ void StartFrameCapture(id<MTLDevice> metalDevice, id<MTLCommandQueue> metalCmdQu
     }
 
 #    ifdef __MAC_10_15
-    if (ANGLE_APPLE_AVAILABLE_XCI(10.15, 13.1, 13))
+    if (ANGLE_APPLE_AVAILABLE_XCI(10.15, 13.1, 13, 1.0))
     {
         auto captureDescriptor = mtl::adoptObjCObj([[MTLCaptureDescriptor alloc] init]);
         captureDescriptor.get().captureObject = metalDevice;
@@ -222,7 +222,7 @@ void StartFrameCapture(id<MTLDevice> metalDevice, id<MTLCommandQueue> metalCmdQu
     }
     else
 #    endif  // __MAC_10_15
-        if (ANGLE_APPLE_AVAILABLE_XCI(10.15, 13.1, 13))
+        if (ANGLE_APPLE_AVAILABLE_XCI(10.15, 13.1, 13, 1.0))
         {
             auto captureDescriptor = mtl::adoptObjCObj([[MTLCaptureDescriptor alloc] init]);
             captureDescriptor.get().captureObject = metalDevice;
@@ -855,7 +855,7 @@ static MTLLanguageVersion GetUserSetOrHighestMSLVersion(const MTLLanguageVersion
                 {
 #if (defined(__IPHONE_9_0) && __IPHONE_OS_VERSION_MIN_REQUIRED >= __IPHONE_9_0) &&   \
     (!defined(__IPHONE_16_0) || __IPHONE_OS_VERSION_MIN_REQUIRED < __IPHONE_16_0) && \
-    (TARGET_OS_IOS || TARGET_OS_TV) && !TARGET_OS_MACCATALYST
+    (TARGET_OS_IOS || TARGET_OS_TV || TARGET_OS_VISION) && !TARGET_OS_MACCATALYST
                     case 0:
                         return MTLLanguageVersion1_0;
 #endif
@@ -954,7 +954,7 @@ AutoObjCPtr<id<MTLLibrary>> CreateShaderLibrary(
         // Mark all positions in VS with attribute invariant as non-optimizable
         bool canPerserveInvariance = false;
 #if defined(__MAC_11_0) || defined(__IPHONE_14_0) || defined(__TVOS_14_0)
-        if (ANGLE_APPLE_AVAILABLE_XCI(11.0, 14.0, 14.0))
+        if (ANGLE_APPLE_AVAILABLE_XCI(11.0, 14.0, 14.0, 1.0))
         {
             canPerserveInvariance      = true;
             options.preserveInvariance = usesInvariance;
@@ -1552,7 +1552,7 @@ bool SupportsAppleGPUFamily(id<MTLDevice> device, uint8_t appleFamily)
 #if (TARGET_OS_OSX && __MAC_OS_X_VERSION_MAX_ALLOWED >= 101500) ||  \
     (TARGET_OS_IOS && __IPHONE_OS_VERSION_MAX_ALLOWED >= 130000) || \
     (TARGET_OS_TV && __TV_OS_VERSION_MAX_ALLOWED >= 130000) || TARGET_OS_WATCH || TARGET_OS_VISION
-    if (ANGLE_APPLE_AVAILABLE_XCI(10.15, 13.1, 13))
+    if (ANGLE_APPLE_AVAILABLE_XCI(10.15, 13.1, 13, 1.0))
     {
         MTLGPUFamily family;
         switch (appleFamily)
@@ -1634,7 +1634,7 @@ bool SupportsMacGPUFamily(id<MTLDevice> device, uint8_t macFamily)
 #if TARGET_OS_OSX || TARGET_OS_MACCATALYST
 #    if defined(__MAC_10_15)
     // If device supports [MTLDevice supportsFamily:], then use it.
-    if (ANGLE_APPLE_AVAILABLE_XCI(10.15, 13.1, 13))
+    if (ANGLE_APPLE_AVAILABLE_XCI(10.15, 13.1, 13, 1.0))
     {
         MTLGPUFamily family;
 
diff --git a/src/tests/test_utils/angle_test_instantiate_apple.mm b/src/tests/test_utils/angle_test_instantiate_apple.mm
index 4fa6ff2cf..738b4abbc 100644
--- a/src/tests/test_utils/angle_test_instantiate_apple.mm
+++ b/src/tests/test_utils/angle_test_instantiate_apple.mm
@@ -18,7 +18,7 @@ bool IsMetalTextureSwizzleAvailable()
 {
     // NOTE(hqle): This might not be accurate, since the capabilities also depend on underlying
     // hardwares, however, it is OK for testing.
-    if (ANGLE_APPLE_AVAILABLE_XCI(10.15, 13.1, 13))
+    if (ANGLE_APPLE_AVAILABLE_XCI(10.15, 13.1, 13, 1.0))
     {
         // All NVIDIA and older Intel don't support swizzle because they are GPU family 1.
         // We don't have a way to detect Metal family here, so skip all Intel for now.
@@ -29,7 +29,7 @@ bool IsMetalTextureSwizzleAvailable()
 
 bool IsMetalCompressedTexture3DAvailable()
 {
-    if (ANGLE_APPLE_AVAILABLE_XCI(10.15, 13.1, 13.0))
+    if (ANGLE_APPLE_AVAILABLE_XCI(10.15, 13.1, 13.0, 1.0))
     {
         return true;
     }
