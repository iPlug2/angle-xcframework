diff --git a/config/BUILDCONFIG.gn b/config/BUILDCONFIG.gn
index a9d2caeb1..d4c1dc10e 100644
--- a/config/BUILDCONFIG.gn
+++ b/config/BUILDCONFIG.gn
@@ -561,19 +561,19 @@ foreach(_target_type,
                        invoker.use_libcxx_modules)) {
         # This is necessary for Clang modules builds.
         deps += [
-          "//buildtools/third_party/libc++:std",
-          "//buildtools/third_party/libc++:std_config",
-          "//buildtools/third_party/libc++:std_core",
-          "//buildtools/third_party/libc++:std_ctype_h",
-          "//buildtools/third_party/libc++:std_errno_h",
-          "//buildtools/third_party/libc++:std_fenv_h",
-          "//buildtools/third_party/libc++:std_float_h",
-          "//buildtools/third_party/libc++:std_inttypes_h",
-          "//buildtools/third_party/libc++:std_math_h",
-          "//buildtools/third_party/libc++:std_private_mbstate_t",
-          "//buildtools/third_party/libc++:std_string_h",
-          "//buildtools/third_party/libc++:std_uchar_h",
-          "//buildtools/third_party/libc++:std_wctype_h",
+          # "//buildtools/third_party/libc++:std",
+          # "//buildtools/third_party/libc++:std_config",
+          # "//buildtools/third_party/libc++:std_core",
+          # "//buildtools/third_party/libc++:std_ctype_h",
+          # "//buildtools/third_party/libc++:std_errno_h",
+          # "//buildtools/third_party/libc++:std_fenv_h",
+          # "//buildtools/third_party/libc++:std_float_h",
+          # "//buildtools/third_party/libc++:std_inttypes_h",
+          # "//buildtools/third_party/libc++:std_math_h",
+          # "//buildtools/third_party/libc++:std_private_mbstate_t",
+          # "//buildtools/third_party/libc++:std_string_h",
+          # "//buildtools/third_party/libc++:std_uchar_h",
+          # "//buildtools/third_party/libc++:std_wctype_h",
         ]
       }
 
@@ -665,22 +665,22 @@ foreach(_target_type,
                        invoker.use_libcxx_modules)) {
         # These are necessary for Clang modules builds.
         deps += [
-          "//buildtools/third_party/libc++:_Builtin_limits",
-          "//buildtools/third_party/libc++:_Builtin_stdarg",
-          "//buildtools/third_party/libc++:_Builtin_stddef",
-          "//buildtools/third_party/libc++:std",
-          "//buildtools/third_party/libc++:std_config",
-          "//buildtools/third_party/libc++:std_core",
-          "//buildtools/third_party/libc++:std_ctype_h",
-          "//buildtools/third_party/libc++:std_errno_h",
-          "//buildtools/third_party/libc++:std_fenv_h",
-          "//buildtools/third_party/libc++:std_float_h",
-          "//buildtools/third_party/libc++:std_inttypes_h",
-          "//buildtools/third_party/libc++:std_math_h",
-          "//buildtools/third_party/libc++:std_private_mbstate_t",
-          "//buildtools/third_party/libc++:std_string_h",
-          "//buildtools/third_party/libc++:std_uchar_h",
-          "//buildtools/third_party/libc++:std_wctype_h",
+          # "//buildtools/third_party/libc++:_Builtin_limits",
+          # "//buildtools/third_party/libc++:_Builtin_stdarg",
+          # "//buildtools/third_party/libc++:_Builtin_stddef",
+          # "//buildtools/third_party/libc++:std",
+          # "//buildtools/third_party/libc++:std_config",
+          # "//buildtools/third_party/libc++:std_core",
+          # "//buildtools/third_party/libc++:std_ctype_h",
+          # "//buildtools/third_party/libc++:std_errno_h",
+          # "//buildtools/third_party/libc++:std_fenv_h",
+          # "//buildtools/third_party/libc++:std_float_h",
+          # "//buildtools/third_party/libc++:std_inttypes_h",
+          # "//buildtools/third_party/libc++:std_math_h",
+          # "//buildtools/third_party/libc++:std_private_mbstate_t",
+          # "//buildtools/third_party/libc++:std_string_h",
+          # "//buildtools/third_party/libc++:std_uchar_h",
+          # "//buildtools/third_party/libc++:std_wctype_h",
         ]
       }
 
diff --git a/config/compiler/BUILD.gn b/config/compiler/BUILD.gn
index e7a60d56b..128db7840 100644
--- a/config/compiler/BUILD.gn
+++ b/config/compiler/BUILD.gn
@@ -1982,12 +1982,6 @@ config("default_warnings") {
       cflags += [
         # TODO(crbug.com/330524456): -Wcast-function-type is under -Wextra now.
         "-Wno-cast-function-type",
-
-        # TODO(crbug.com/40284799): Fix and re-enable.
-        "-Wno-thread-safety-reference-return",
-
-        # TODO(crbug.com/376641662): Fix and re-enable.
-        "-Wno-nontrivial-memcall",
       ]
 
       cflags_cc += [
@@ -2967,7 +2961,7 @@ config("symbols") {
     configs += [ "//build/config:compress_debug_sections" ]
   }
 
-  if (is_clang && !is_nacl && is_win && !is_component_build) {
+  if (is_clang && !is_nacl && is_win && !is_component_build && is_apple) {
     # Remove unreferenced methods to reduce type info in symbols.
     # See: https://github.com/llvm/llvm-project/pull/87018.
     # The downside with this flag is precisely that: Unreferenced methods get
diff --git a/config/ios/BUILD.gn b/config/ios/BUILD.gn
index a4db0c177..2a61db736 100644
--- a/config/ios/BUILD.gn
+++ b/config/ios/BUILD.gn
@@ -261,6 +261,14 @@ group("xctest") {
 _xctrunner_path =
     "$ios_sdk_platform_path/Developer/Library/Xcode/Agents/XCTRunner.app"
 
+if (target_environment == "catalyst") {
+  _xctrunner_executable_path =
+      "$_xctrunner_path/Contents/MacOS/XCTRunner"
+} else {
+  _xctrunner_executable_path =
+      "$_xctrunner_path/XCTRunner"
+}
+
 # When building with RBE, $ios_sdk_platform_path corresponds to a symlink
 # below $root_build_dir that points to the real SDK to use. Because the files
 # are below $root_build_dir, it is not possible to list them as a target input
@@ -274,15 +282,24 @@ _xctrunner_path =
 # To workaround this, add a target that pretends to create those files
 # (but does nothing). See https://crbug.com/1061487 for why this is needed.
 if (ios_use_xcode_symlinks) {
-  action("copy_xctrunner_app") {
-    testonly = true
-    script = "//build/noop.py"
+  if (target_environment == "catalyst") {
+    outputs = [
+      "$_xctrunner_path/Contents/Info.plist",
+      "$_xctrunner_path/Contents/PkgInfo",
+      "$_xctrunner_executable_path",
+    ]
+  } else {
     outputs = [
       "$_xctrunner_path/Info.plist",
       "$_xctrunner_path/PkgInfo",
-      "$_xctrunner_path/XCTRunner",
+      "$_xctrunner_executable_path",
     ]
   }
+  action("copy_xctrunner_app") {
+    testonly = true
+    script = "//build/noop.py"
+    outputs = outputs
+  }
 }
 
 # When creating the test runner for an XCUITest, the arm64e slice of the binary
@@ -291,7 +308,7 @@ if (ios_use_xcode_symlinks) {
 action("xctest_runner_without_arm64e") {
   testonly = true
   script = "//build/config/ios/strip_arm64e.py"
-  sources = [ "$_xctrunner_path/XCTRunner" ]
+  sources = [ _xctrunner_executable_path ]
   outputs = [ "$target_out_dir/XCTRunner" ]
   args = [
     "--output",
diff --git a/config/ios/rules.gni b/config/ios/rules.gni
index 290c1f326..b417ec381 100644
--- a/config/ios/rules.gni
+++ b/config/ios/rules.gni
@@ -1358,9 +1358,13 @@ template("ios_xcuitest_test_runner_bundle") {
     testonly = true
     script = "//build/apple/plist_util.py"
 
-    sources = [
-      "$_xctrunner_path/Info.plist",
+    if (target_environment == "catalyst") {
+      sources = ["$_xctrunner_path/Contents/Info.plist"]
+    } else {
+      sources = ["$_xctrunner_path/Info.plist"]
+    }
 
+    sources += [
       # NOTE: The XCTRunnerAddition+Info.plist must come after the Info.plist
       # because it overrides the values under "CFBundleIdentifier" and
       # "CFBundleName".
@@ -1405,7 +1409,11 @@ template("ios_xcuitest_test_runner_bundle") {
     testonly = true
     visibility = [ ":$_target_name" ]
 
-    sources = [ "$_xctrunner_path/PkgInfo" ]
+    if (target_environment == "catalyst") {
+      sources = ["$_xctrunner_path/Contents/PkgInfo"]
+    } else {
+      sources = ["$_xctrunner_path/PkgInfo"]
+    }
 
     outputs = [ "{{bundle_contents_dir}}/PkgInfo" ]
 
