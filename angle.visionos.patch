diff --git a/src/common/apple/apple_platform.h b/src/common/apple/apple_platform.h
index cee7b44d61..718c9b9f8f 100644
--- a/src/common/apple/apple_platform.h
+++ b/src/common/apple/apple_platform.h
@@ -18,7 +18,8 @@
      (ANGLE_PLATFORM_WATCHOS && !ANGLE_PLATFORM_IOS_FAMILY_SIMULATOR &&       \
       __WATCH_OS_VERSION_MIN_REQUIRED >= 80000) ||                            \
      (TARGET_OS_TV && !ANGLE_PLATFORM_IOS_FAMILY_SIMULATOR &&                 \
-      __TV_OS_VERSION_MIN_REQUIRED >= 150000)) &&                             \
+      __TV_OS_VERSION_MIN_REQUIRED >= 150000) ||                              \
+     (TARGET_OS_VISION && !ANGLE_PLATFORM_IOS_FAMILY_SIMULATOR)) &&           \
     (defined(__has_include) && __has_include(<Metal/MTLResource_Private.h>))
 #    define ANGLE_HAVE_MTLRESOURCE_SET_OWNERSHIP_IDENTITY 1
 #else
diff --git a/src/common/apple_platform_utils.h b/src/common/apple_platform_utils.h
index 23c27eaee1..499f04621b 100644
--- a/src/common/apple_platform_utils.h
+++ b/src/common/apple_platform_utils.h
@@ -20,30 +20,30 @@
 #if TARGET_OS_MACCATALYST
 // ANGLE_APPLE_AVAILABLE_XCI: check if either of the 3 platforms (OSX/Catalyst/iOS) min verions is
 // available:
-#    define ANGLE_APPLE_AVAILABLE_XCI(macVer, macCatalystVer, iOSVer) \
-        @available(macOS macVer, macCatalyst macCatalystVer, iOS iOSVer, *)
+#    define ANGLE_APPLE_AVAILABLE_XCI(macVer, macCatalystVer, iOSVer, visionOSVer) \
+        @available(macOS macVer, macCatalyst macCatalystVer, iOS iOSVer, visionOS visionOSVer, *)
 // ANGLE_APPLE_AVAILABLE_XC: check if either of the 2 platforms (OSX/Catalyst) min verions is
 // available:
 #    define ANGLE_APPLE_AVAILABLE_XC(macVer, macCatalystVer) \
         @available(macOS macVer, macCatalyst macCatalystVer, *)
 // ANGLE_APPLE_AVAILABLE_CI: check if either of the 2 platforms (Catalyst/iOS) min verions is
 // available:
-#    define ANGLE_APPLE_AVAILABLE_CI(macCatalystVer, iOSVer) \
-        @available(macCatalyst macCatalystVer, iOS iOSVer, *)
+#    define ANGLE_APPLE_AVAILABLE_CI(macCatalystVer, iOSVer, visionOSVer) \
+        @available(macCatalyst macCatalystVer, iOS iOSVer, visionOS visionOSVer, *)
 #else
-#    define ANGLE_APPLE_AVAILABLE_XCI(macVer, macCatalystVer, iOSVer) \
-        ANGLE_APPLE_AVAILABLE_XI(macVer, iOSVer)
+#    define ANGLE_APPLE_AVAILABLE_XCI(macVer, macCatalystVer, iOSVer, visionOSVer) \
+        ANGLE_APPLE_AVAILABLE_XI(macVer, iOSVer, visionOSVer)
 
 #    define ANGLE_APPLE_AVAILABLE_XC(macVer, macCatalystVer) @available(macOS macVer, *)
-#    define ANGLE_APPLE_AVAILABLE_CI(macCatalystVer, iOSVer) @available(iOS iOSVer, tvOS iOSVer, *)
+#    define ANGLE_APPLE_AVAILABLE_CI(macCatalystVer, iOSVer, visionOSVer) @available(iOS iOSVer, tvOS iOSVer, visionOS visionOSVer, *)
 #endif
 
 // ANGLE_APPLE_AVAILABLE_XI: check if either of the 2 platforms (OSX/iOS) min verions is available:
-#define ANGLE_APPLE_AVAILABLE_XI(macVer, iOSVer) \
-    @available(macOS macVer, iOS iOSVer, tvOS iOSVer, *)
+#define ANGLE_APPLE_AVAILABLE_XI(macVer, iOSVer, visionOSVer) \
+    @available(macOS macVer, iOS iOSVer, tvOS iOSVer, visionOS visionOSVer, *)
 
 // ANGLE_APPLE_AVAILABLE_I: check if a particular iOS version is available
-#define ANGLE_APPLE_AVAILABLE_I(iOSVer) @available(iOS iOSVer, tvOS iOSVer, *)
+#define ANGLE_APPLE_AVAILABLE_I(iOSVer, visionOSVer) @available(iOS iOSVer, tvOS iOSVer, visionOS visionOSVer, *)
 
 #if TARGET_OS_IPHONE
 #    if !defined(__IPHONE_11_0)
diff --git a/src/common/apple_platform_utils.mm b/src/common/apple_platform_utils.mm
index 42d663a801..e35ae31edc 100644
--- a/src/common/apple_platform_utils.mm
+++ b/src/common/apple_platform_utils.mm
@@ -78,9 +78,9 @@ bool IsMetalRendererAvailable()
 
     // We only support macos 10.13+ and 11 for now. Since they are requirements for Metal 2.0.
 #if TARGET_OS_SIMULATOR
-    if (ANGLE_APPLE_AVAILABLE_XCI(10.13, 13.1, 13))
+    if (ANGLE_APPLE_AVAILABLE_XCI(10.13, 13.1, 13, 1.0))
 #else
-    if (ANGLE_APPLE_AVAILABLE_XCI(10.13, 13.1, 11))
+    if (ANGLE_APPLE_AVAILABLE_XCI(10.13, 13.1, 11, 1.0))
 #endif
     {
         if (!queriedSystemDevice)
@@ -98,7 +98,7 @@ bool IsMetalRendererAvailable()
 #if defined(ANGLE_PLATFORM_MACOS) || defined(ANGLE_PLATFORM_MACCATALYST)
                 // Old Macs, such as MacBookPro11,4, cannot use ANGLE's Metal backend.
                 // This check can be removed once they are no longer supported.
-                if (ANGLE_APPLE_AVAILABLE_XCI(10.15, 13.1, 13))
+                if (ANGLE_APPLE_AVAILABLE_XCI(10.15, 13.1, 13, 1.0))
                 {
                     if ([device supportsFamily:MTLGPUFamilyMac2])
                         gpuFamilySufficient = true;
diff --git a/src/common/platform.h b/src/common/platform.h
index 11848914ff..fff8f5df97 100644
--- a/src/common/platform.h
+++ b/src/common/platform.h
@@ -150,6 +150,8 @@
 #            define ANGLE_PLATFORM_WATCHOS 1
 #        elif TARGET_OS_TV
 #            define ANGLE_PLATFORM_APPLETV 1
+#        elif TARGET_OS_VISION
+#            define ANGLE_PLATFORM_VISION 1
 #        endif
 #    endif
 #    // Identify Metal API >= what shipped on macOS Catalina.
diff --git a/src/libANGLE/renderer/metal/ContextMtl.mm b/src/libANGLE/renderer/metal/ContextMtl.mm
index 421bf0b952..932c7293f0 100644
--- a/src/libANGLE/renderer/metal/ContextMtl.mm
+++ b/src/libANGLE/renderer/metal/ContextMtl.mm
@@ -219,7 +219,7 @@ ContextMtl::ContextMtl(const gl::State &state,
       mProvokingVertexHelper(this),
       mContextDevice(GetOwnershipIdentity(attribs))
 {
-    if (@available(iOS 12.0, macOS 10.14, *))
+    if (@available(iOS 12.0, macOS 10.14, visionOS 1.0, *))
     {
         mHasMetalSharedEvents = true;
     }
diff --git a/src/libANGLE/renderer/metal/DisplayMtl.mm b/src/libANGLE/renderer/metal/DisplayMtl.mm
index 2e128f005c..368c753137 100644
--- a/src/libANGLE/renderer/metal/DisplayMtl.mm
+++ b/src/libANGLE/renderer/metal/DisplayMtl.mm
@@ -764,7 +764,7 @@ void DisplayMtl::ensureCapsInitialized() const
     // for now. http://anglebug.com/4816
 
     // NOTE(kpiddington): This seems to be fixed in macOS Monterey
-    if (ANGLE_APPLE_AVAILABLE_XCI(12.0, 15.0, 15.0))
+    if (ANGLE_APPLE_AVAILABLE_XCI(12.0, 15.0, 15.0, 1.0))
     {
         mNativeCaps.maxAliasedPointSize = 511;
     }
@@ -923,7 +923,7 @@ void DisplayMtl::ensureCapsInitialized() const
     mNativeLimitations.squarePvrtc1 = true;
 
     // Older Metal does not support compressed formats for TEXTURE_3D target.
-    if (ANGLE_APPLE_AVAILABLE_XCI(10.15, 13.1, 13.0))
+    if (ANGLE_APPLE_AVAILABLE_XCI(10.15, 13.1, 13.0, 1.0))
     {
         mNativeLimitations.noCompressedTexture3D = !supportsEitherGPUFamily(3, 1);
     }
@@ -960,13 +960,13 @@ void DisplayMtl::initializeExtensions() const
     mNativeExtensions.copyCompressedTextureCHROMIUM = false;
 
 #if !ANGLE_PLATFORM_WATCHOS
-    if (@available(iOS 14.0, macOS 10.11, macCatalyst 14.0, tvOS 16.0, *))
+    if (@available(iOS 14.0, macOS 10.11, macCatalyst 14.0, tvOS 16.0, visionOS 1.0, *))
     {
         mNativeExtensions.textureMirrorClampToEdgeEXT = true;
     }
 #endif
 
-    if (ANGLE_APPLE_AVAILABLE_XCI(10.11, 13.1, 11.0))
+    if (ANGLE_APPLE_AVAILABLE_XCI(10.11, 13.1, 11.0, 1.0))
     {
         mNativeExtensions.depthClampEXT = true;
     }
@@ -1037,7 +1037,7 @@ void DisplayMtl::initializeExtensions() const
 
     mNativeExtensions.sampleVariablesOES = true;
 
-    if (ANGLE_APPLE_AVAILABLE_XCI(11.0, 14.0, 14.0))
+    if (ANGLE_APPLE_AVAILABLE_XCI(11.0, 14.0, 14.0, 1.0))
     {
         mNativeExtensions.shaderMultisampleInterpolationOES =
             [mMetalDevice supportsPullModelInterpolation];
@@ -1108,7 +1108,7 @@ void DisplayMtl::initializeExtensions() const
     mNativeExtensions.provokingVertexANGLE = true;
 
     // GL_EXT_blend_func_extended
-    if (ANGLE_APPLE_AVAILABLE_XCI(10.12, 13.1, 11.0))
+    if (ANGLE_APPLE_AVAILABLE_XCI(10.12, 13.1, 11.0, 1.0))
     {
         mNativeExtensions.blendFuncExtendedEXT = true;
         mNativeCaps.maxDualSourceDrawBuffers   = 1;
@@ -1416,7 +1416,7 @@ bool DisplayMtl::supportsEitherGPUFamily(uint8_t iOSFamily, uint8_t macFamily) c
 
 bool DisplayMtl::supportsMetal2_1() const
 {
-    if (ANGLE_APPLE_AVAILABLE_XCI(10.14, 13.1, 12.0))
+    if (ANGLE_APPLE_AVAILABLE_XCI(10.14, 13.1, 12.0, 1.0))
     {
         return true;
     }
@@ -1427,7 +1427,7 @@ bool DisplayMtl::supportsMetal2_1() const
 }
 bool DisplayMtl::supportsMetal2_2() const
 {
-    if (ANGLE_APPLE_AVAILABLE_XCI(10.15, 13.1, 13.0))
+    if (ANGLE_APPLE_AVAILABLE_XCI(10.15, 13.1, 13.0, 1.0))
     {
         return true;
     }
@@ -1442,7 +1442,7 @@ bool DisplayMtl::supports32BitFloatFiltering() const
 #if (defined(__MAC_11_0) && __MAC_OS_X_VERSION_MIN_REQUIRED >= __MAC_11_0) ||        \
     (defined(__IPHONE_14_0) && __IPHONE_OS_VERSION_MIN_REQUIRED >= __IPHONE_14_0) || \
     (defined(__TVOS_14_0) && __TV_OS_VERSION_MIN_REQUIRED >= __TVOS_14_0)
-    if (@available(ios 14.0, macOS 11.0, *))
+    if (@available(iOS 14.0, macOS 11.0, visionOS 1.0, *))
     {
         return [mMetalDevice supports32BitFloatFiltering];
     }
diff --git a/src/libANGLE/renderer/metal/FrameBufferMtl.mm b/src/libANGLE/renderer/metal/FrameBufferMtl.mm
index cddd61c2d4..d8f7d198d9 100644
--- a/src/libANGLE/renderer/metal/FrameBufferMtl.mm
+++ b/src/libANGLE/renderer/metal/FrameBufferMtl.mm
@@ -658,7 +658,7 @@ gl::FramebufferStatus FramebufferMtl::checkStatus(const gl::Context *context) co
 
 gl::FramebufferStatus FramebufferMtl::checkPackedDepthStencilAttachment() const
 {
-    if (ANGLE_APPLE_AVAILABLE_XCI(10.14, 13.1, 12.0))
+    if (ANGLE_APPLE_AVAILABLE_XCI(10.14, 13.1, 12.0, 1.0))
     {
         // If depth/stencil attachment has depth & stencil bits, then depth & stencil must not have
         // separate attachment. i.e. They must be the same texture or one of them has no
diff --git a/src/libANGLE/renderer/metal/gen_mtl_format_table.py b/src/libANGLE/renderer/metal/gen_mtl_format_table.py
index 07eb14aef8..5f10020f10 100644
--- a/src/libANGLE/renderer/metal/gen_mtl_format_table.py
+++ b/src/libANGLE/renderer/metal/gen_mtl_format_table.py
@@ -473,7 +473,7 @@ def gen_image_map_switch_string(image_table, angle_to_gl):
     for angle_format in sorted(sim_override.keys()):
         switch_data += gen_image_map_switch_simple_case(angle_format, sim_override[angle_format],
                                                         angle_to_gl, sim_angle_to_mtl)
-    switch_data += "#if TARGET_OS_IOS\n"
+    switch_data += "#if TARGET_OS_IOS || TARGET_OS_VISION\n"
     for angle_format in sorted(astc_tpl_map.keys()):
         switch_data += gen_image_map_switch_astc_case_iosmac(angle_format, angle_to_gl,
                                                              astc_tpl_map)
@@ -491,7 +491,7 @@ def gen_image_map_switch_string(image_table, angle_to_gl):
     for angle_format in sorted(ios_override.keys()):
         switch_data += gen_image_map_switch_simple_case(angle_format, ios_override[angle_format],
                                                         angle_to_gl, ios_angle_to_mtl)
-    switch_data += "#if TARGET_OS_IOS\n"
+    switch_data += "#if TARGET_OS_IOS || TARGET_OS_VISION\n"
     for angle_format in sorted(astc_tpl_map.keys()):
         switch_data += gen_image_map_switch_astc_case_iosmac(angle_format, angle_to_gl,
                                                              astc_tpl_map)
@@ -501,7 +501,7 @@ def gen_image_map_switch_string(image_table, angle_to_gl):
     for angle_format in sorted(astc_tpl_map.keys()):
         switch_data += gen_image_map_switch_astc_case_tv_watchos(angle_format, angle_to_gl,
                                                                  astc_tpl_map)
-    switch_data += "#endif // TARGET_OS_IOS || TARGET_OS_TV\n"
+    switch_data += "#endif // TARGET_OS_IOS || TARGET_OS_VISION || TARGET_OS_TV\n"
     switch_data += "#endif // TARGET_OS_IPHONE\n"
 
     # Try to support all iOS formats on newer macOS with Apple GPU.
diff --git a/src/libANGLE/renderer/metal/mtl_command_buffer.mm b/src/libANGLE/renderer/metal/mtl_command_buffer.mm
index 470f8c1df7..796f910556 100644
--- a/src/libANGLE/renderer/metal/mtl_command_buffer.mm
+++ b/src/libANGLE/renderer/metal/mtl_command_buffer.mm
@@ -380,7 +380,7 @@ inline void UseResourceCmd(id<MTLRenderCommandEncoder> encoder, IntermediateComm
     mtl::RenderStages stages = stream->fetch<mtl::RenderStages>();
     ANGLE_UNUSED_VARIABLE(stages);
 #if defined(__IPHONE_13_0) || defined(__MAC_10_15)
-    if (ANGLE_APPLE_AVAILABLE_XCI(10.15, 13.1, 13.0))
+    if (ANGLE_APPLE_AVAILABLE_XCI(10.15, 13.1, 13.0, 1.0))
     {
         [encoder useResource:resource usage:usage stages:stages];
     }
diff --git a/src/libANGLE/renderer/metal/mtl_context_device.mm b/src/libANGLE/renderer/metal/mtl_context_device.mm
index bd037e2c21..be11fffea6 100644
--- a/src/libANGLE/renderer/metal/mtl_context_device.mm
+++ b/src/libANGLE/renderer/metal/mtl_context_device.mm
@@ -145,7 +145,7 @@ void ContextDevice::setOwnerWithIdentity(id<MTLResource> resource) const
 
 bool ContextDevice::hasUnifiedMemory() const
 {
-    if (@available(iOS 13.0, macOS 10.15, macCatalyst 13.1, tvOS 13.0, *))
+    if (@available(iOS 13.0, macOS 10.15, macCatalyst 13.1, tvOS 13.0, visionOS 1.0, *))
     {
         return [get() hasUnifiedMemory];
     }
diff --git a/src/libANGLE/renderer/metal/mtl_format_table_autogen.mm b/src/libANGLE/renderer/metal/mtl_format_table_autogen.mm
index f11e0150a7..c586c799a3 100644
--- a/src/libANGLE/renderer/metal/mtl_format_table_autogen.mm
+++ b/src/libANGLE/renderer/metal/mtl_format_table_autogen.mm
@@ -266,7 +266,7 @@ angle::FormatID Format::MetalToAngleFormatID(MTLPixelFormat formatMtl)
             return angle::FormatID::ASTC_8x6_UNORM_BLOCK;
         case MTLPixelFormatASTC_8x8_LDR:
             return angle::FormatID::ASTC_8x8_UNORM_BLOCK;
-#    if TARGET_OS_IOS || TARGET_OS_OSX
+#    if TARGET_OS_IOS || TARGET_OS_VISION || TARGET_OS_OSX
         case MTLPixelFormatASTC_10x10_HDR:
             return angle::FormatID::ASTC_10x10_UNORM_BLOCK;
         case MTLPixelFormatASTC_10x5_HDR:
@@ -1199,7 +1199,7 @@ void Format::init(const DisplayMtl *display, angle::FormatID intendedFormatId_)
             this->initFunction   = Initialize4ComponentData<GLubyte, 0x00, 0x00, 0x00, 0xFF>;
             break;
 
-#    if TARGET_OS_IOS
+#    if TARGET_OS_IOS || TARGET_OS_VISION
         case angle::FormatID::ASTC_10x10_UNORM_BLOCK:
 
             if (display->supportsAppleGPUFamily(6))
@@ -1723,7 +1723,7 @@ void Format::init(const DisplayMtl *display, angle::FormatID intendedFormatId_)
             this->actualFormatId = angle::FormatID::D32_FLOAT_S8X24_UINT;
             break;
 
-#    if TARGET_OS_IOS
+#    if TARGET_OS_IOS || TARGET_OS_VISION
         case angle::FormatID::ASTC_10x10_UNORM_BLOCK:
 
             if (display->supportsAppleGPUFamily(6))
@@ -4112,7 +4112,7 @@ void FormatTable::initNativeFormatCapsAutogen(const DisplayMtl *display)
                   /** colorRenderable*/ display->supportsAppleGPUFamily(1),
                   /** depthRenderable*/ false);
 
-#    if TARGET_OS_IOS || TARGET_OS_OSX
+#    if TARGET_OS_IOS || TARGET_OS_VISION || TARGET_OS_OSX
     setFormatCaps(MTLPixelFormatASTC_10x10_HDR, /** filterable*/ display->supportsAppleGPUFamily(6),
                   /** writable*/ false, /** blendable*/ false, /** multisample*/ false,
                   /** resolve*/ false, /** colorRenderable*/ false, /** depthRenderable*/ false);
diff --git a/src/libANGLE/renderer/metal/mtl_format_utils.mm b/src/libANGLE/renderer/metal/mtl_format_utils.mm
index 225b52fe94..2a84c524b9 100644
--- a/src/libANGLE/renderer/metal/mtl_format_utils.mm
+++ b/src/libANGLE/renderer/metal/mtl_format_utils.mm
@@ -165,7 +165,7 @@ bool Format::isPVRTC() const
 {
     switch (metalFormat)
     {
-#if (TARGET_OS_IOS && !TARGET_OS_MACCATALYST) || \
+#if (TARGET_OS_IOS && !TARGET_OS_MACCATALYST) || TARGET_OS_VISION || \
     (TARGET_OS_OSX && (__MAC_OS_X_VERSION_MAX_ALLOWED >= 110000))
         case MTLPixelFormatPVRTC_RGB_2BPP:
         case MTLPixelFormatPVRTC_RGB_2BPP_sRGB:
diff --git a/src/libANGLE/renderer/metal/mtl_resources.mm b/src/libANGLE/renderer/metal/mtl_resources.mm
index 1a16ccf79c..0f51eb7e48 100644
--- a/src/libANGLE/renderer/metal/mtl_resources.mm
+++ b/src/libANGLE/renderer/metal/mtl_resources.mm
@@ -401,7 +401,7 @@ Texture::Texture(ContextMtl *context,
 
         if (memoryLess)
         {
-#if (TARGET_OS_IOS || TARGET_OS_TV) && !TARGET_OS_MACCATALYST
+#if (TARGET_OS_IOS || TARGET_OS_TV || TARGET_OS_VISION) && !TARGET_OS_MACCATALYST
             desc.resourceOptions = MTLResourceStorageModeMemoryless;
 #else
             desc.resourceOptions = MTLResourceStorageModePrivate;
@@ -463,7 +463,7 @@ Texture::Texture(ContextMtl *context,
             desc.usage |= MTLTextureUsageRenderTarget;
         }
 
-#if (TARGET_OS_IOS || TARGET_OS_TV || TARGET_OS_WATCH) && !TARGET_OS_MACCATALYST
+#if (TARGET_OS_IOS || TARGET_OS_TV || TARGET_OS_WATCH || TARGET_OS_VISION) && !TARGET_OS_MACCATALYST
         desc.resourceOptions = MTLResourceStorageModeShared;
 #else
         desc.resourceOptions = MTLResourceStorageModeManaged;
diff --git a/src/libANGLE/renderer/metal/mtl_utils.mm b/src/libANGLE/renderer/metal/mtl_utils.mm
index 538a508938..d9afd33c20 100644
--- a/src/libANGLE/renderer/metal/mtl_utils.mm
+++ b/src/libANGLE/renderer/metal/mtl_utils.mm
@@ -135,7 +135,7 @@ void StartFrameCapture(id<MTLDevice> metalDevice, id<MTLCommandQueue> metalCmdQu
     }
 
 #    ifdef __MAC_10_15
-    if (ANGLE_APPLE_AVAILABLE_XCI(10.15, 13.1, 13))
+    if (ANGLE_APPLE_AVAILABLE_XCI(10.15, 13.1, 13, 1.0))
     {
         auto captureDescriptor = mtl::adoptObjCObj([[MTLCaptureDescriptor alloc] init]);
         captureDescriptor.get().captureObject = metalDevice;
@@ -163,7 +163,7 @@ void StartFrameCapture(id<MTLDevice> metalDevice, id<MTLCommandQueue> metalCmdQu
     }
     else
 #    endif  // __MAC_10_15
-        if (ANGLE_APPLE_AVAILABLE_XCI(10.15, 13.1, 13))
+        if (ANGLE_APPLE_AVAILABLE_XCI(10.15, 13.1, 13, 1.0))
         {
             auto captureDescriptor = mtl::adoptObjCObj([[MTLCaptureDescriptor alloc] init]);
             captureDescriptor.get().captureObject = metalDevice;
@@ -790,7 +790,7 @@ static MTLLanguageVersion GetUserSetOrHighestMSLVersion(const MTLLanguageVersion
                 {
 #if (defined(__IPHONE_9_0) && __IPHONE_OS_VERSION_MIN_REQUIRED >= __IPHONE_9_0) &&   \
     (!defined(__IPHONE_16_0) || __IPHONE_OS_VERSION_MIN_REQUIRED < __IPHONE_16_0) && \
-    (TARGET_OS_IOS || TARGET_OS_TV) && !TARGET_OS_MACCATALYST
+    (TARGET_OS_IOS || TARGET_OS_TV || TARGET_OS_VISION) && !TARGET_OS_MACCATALYST
                     case 0:
                         return MTLLanguageVersion1_0;
 #endif
@@ -889,7 +889,7 @@ AutoObjCPtr<id<MTLLibrary>> CreateShaderLibrary(
         // Mark all positions in VS with attribute invariant as non-optimizable
         bool canPerserveInvariance = false;
 #if defined(__MAC_11_0) || defined(__IPHONE_14_0) || defined(__TVOS_14_0)
-        if (ANGLE_APPLE_AVAILABLE_XCI(11.0, 14.0, 14.0))
+        if (ANGLE_APPLE_AVAILABLE_XCI(11.0, 14.0, 14.0, 1.0))
         {
             canPerserveInvariance      = true;
             options.preserveInvariance = usesInvariance;
@@ -1484,7 +1484,7 @@ bool SupportsAppleGPUFamily(id<MTLDevice> device, uint8_t appleFamily)
 #if (__MAC_OS_X_VERSION_MAX_ALLOWED >= 101500 || __IPHONE_OS_VERSION_MAX_ALLOWED >= 130000) || \
     (__TV_OS_VERSION_MAX_ALLOWED >= 130000)
     // If device supports [MTLDevice supportsFamily:], then use it.
-    if (ANGLE_APPLE_AVAILABLE_XCI(10.15, 13.1, 13))
+    if (ANGLE_APPLE_AVAILABLE_XCI(10.15, 13.1, 13, 1.0))
     {
         MTLGPUFamily family;
         switch (appleFamily)
@@ -1504,7 +1504,7 @@ bool SupportsAppleGPUFamily(id<MTLDevice> device, uint8_t appleFamily)
             case 5:
                 family = MTLGPUFamilyApple5;
                 break;
-#    if TARGET_OS_IOS || (TARGET_OS_OSX && __MAC_OS_X_VERSION_MAX_ALLOWED >= 110000)
+#    if TARGET_OS_IOS || TARGET_OS_VISION || (TARGET_OS_OSX && __MAC_OS_X_VERSION_MAX_ALLOWED >= 110000)
             case 6:
                 family = MTLGPUFamilyApple6;
                 break;
@@ -1516,7 +1516,7 @@ bool SupportsAppleGPUFamily(id<MTLDevice> device, uint8_t appleFamily)
     }   // Metal 2.2
 #endif  // __IPHONE_OS_VERSION_MAX_ALLOWED
 
-#if (!TARGET_OS_IOS && !TARGET_OS_TV) || TARGET_OS_MACCATALYST || \
+#if (!TARGET_OS_IOS && !TARGET_OS_TV && !TARGET_OS_VISION) || TARGET_OS_MACCATALYST || \
     (TARGET_OS_IOS && defined(__IPHONE_16_0) && __IPHONE_OS_VERSION_MIN_REQUIRED >= __IPHONE_16_0)
     return false;
 #else
@@ -1525,7 +1525,7 @@ bool SupportsAppleGPUFamily(id<MTLDevice> device, uint8_t appleFamily)
     MTLFeatureSet featureSet;
     switch (appleFamily)
     {
-#    if TARGET_OS_IOS
+#    if TARGET_OS_IOS || TARGET_OS_VISION
         case 1:
             featureSet = MTLFeatureSet_iOS_GPUFamily1_v1;
             break;
@@ -1562,7 +1562,7 @@ bool SupportsMacGPUFamily(id<MTLDevice> device, uint8_t macFamily)
 #if TARGET_OS_OSX || TARGET_OS_MACCATALYST
 #    if defined(__MAC_10_15)
     // If device supports [MTLDevice supportsFamily:], then use it.
-    if (ANGLE_APPLE_AVAILABLE_XCI(10.15, 13.1, 13))
+    if (ANGLE_APPLE_AVAILABLE_XCI(10.15, 13.1, 13, 1.0))
     {
         MTLGPUFamily family;
 
diff --git a/src/tests/test_utils/angle_test_instantiate_apple.mm b/src/tests/test_utils/angle_test_instantiate_apple.mm
index 4fa6ff2cf9..738b4abbcb 100644
--- a/src/tests/test_utils/angle_test_instantiate_apple.mm
+++ b/src/tests/test_utils/angle_test_instantiate_apple.mm
@@ -18,7 +18,7 @@ bool IsMetalTextureSwizzleAvailable()
 {
     // NOTE(hqle): This might not be accurate, since the capabilities also depend on underlying
     // hardwares, however, it is OK for testing.
-    if (ANGLE_APPLE_AVAILABLE_XCI(10.15, 13.1, 13))
+    if (ANGLE_APPLE_AVAILABLE_XCI(10.15, 13.1, 13, 1.0))
     {
         // All NVIDIA and older Intel don't support swizzle because they are GPU family 1.
         // We don't have a way to detect Metal family here, so skip all Intel for now.
@@ -29,7 +29,7 @@ bool IsMetalTextureSwizzleAvailable()
 
 bool IsMetalCompressedTexture3DAvailable()
 {
-    if (ANGLE_APPLE_AVAILABLE_XCI(10.15, 13.1, 13.0))
+    if (ANGLE_APPLE_AVAILABLE_XCI(10.15, 13.1, 13.0, 1.0))
     {
         return true;
     }
