diff --git a/src/common/apple/apple_platform.h b/src/common/apple/apple_platform.h
index cee7b44d6..718c9b9f8 100644
--- a/src/common/apple/apple_platform.h
+++ b/src/common/apple/apple_platform.h
@@ -18,7 +18,8 @@
      (ANGLE_PLATFORM_WATCHOS && !ANGLE_PLATFORM_IOS_FAMILY_SIMULATOR &&       \
       __WATCH_OS_VERSION_MIN_REQUIRED >= 80000) ||                            \
      (TARGET_OS_TV && !ANGLE_PLATFORM_IOS_FAMILY_SIMULATOR &&                 \
-      __TV_OS_VERSION_MIN_REQUIRED >= 150000)) &&                             \
+      __TV_OS_VERSION_MIN_REQUIRED >= 150000) ||                              \
+     (TARGET_OS_VISION && !ANGLE_PLATFORM_IOS_FAMILY_SIMULATOR)) &&           \
     (defined(__has_include) && __has_include(<Metal/MTLResource_Private.h>))
 #    define ANGLE_HAVE_MTLRESOURCE_SET_OWNERSHIP_IDENTITY 1
 #else
diff --git a/src/common/apple_platform_utils.h b/src/common/apple_platform_utils.h
index 6e9bf32e8..0d2d99eec 100644
--- a/src/common/apple_platform_utils.h
+++ b/src/common/apple_platform_utils.h
@@ -20,30 +20,30 @@
 #if TARGET_OS_MACCATALYST
 // ANGLE_APPLE_AVAILABLE_XCI: check if either of the 3 platforms (OSX/Catalyst/iOS) min verions is
 // available:
-#    define ANGLE_APPLE_AVAILABLE_XCI(macVer, macCatalystVer, iOSVer) \
-        @available(macOS macVer, macCatalyst macCatalystVer, iOS iOSVer, *)
+#    define ANGLE_APPLE_AVAILABLE_XCI(macVer, macCatalystVer, iOSVer, visionOSVer) \
+        @available(macOS macVer, macCatalyst macCatalystVer, iOS iOSVer, visionOS visionOSVer, *)
 // ANGLE_APPLE_AVAILABLE_XC: check if either of the 2 platforms (OSX/Catalyst) min verions is
 // available:
 #    define ANGLE_APPLE_AVAILABLE_XC(macVer, macCatalystVer) \
         @available(macOS macVer, macCatalyst macCatalystVer, *)
 // ANGLE_APPLE_AVAILABLE_CI: check if either of the 2 platforms (Catalyst/iOS) min verions is
 // available:
-#    define ANGLE_APPLE_AVAILABLE_CI(macCatalystVer, iOSVer) \
-        @available(macCatalyst macCatalystVer, iOS iOSVer, *)
+#    define ANGLE_APPLE_AVAILABLE_CI(macCatalystVer, iOSVer, visionOSVer) \
+        @available(macCatalyst macCatalystVer, iOS iOSVer, visionOS visionOSVer, *)
 #else
-#    define ANGLE_APPLE_AVAILABLE_XCI(macVer, macCatalystVer, iOSVer) \
-        ANGLE_APPLE_AVAILABLE_XI(macVer, iOSVer)
+#    define ANGLE_APPLE_AVAILABLE_XCI(macVer, macCatalystVer, iOSVer, visionOSVer) \
+        ANGLE_APPLE_AVAILABLE_XI(macVer, iOSVer, visionOSVer)
 
 #    define ANGLE_APPLE_AVAILABLE_XC(macVer, macCatalystVer) @available(macOS macVer, *)
-#    define ANGLE_APPLE_AVAILABLE_CI(macCatalystVer, iOSVer) @available(iOS iOSVer, tvOS iOSVer, *)
+#    define ANGLE_APPLE_AVAILABLE_CI(macCatalystVer, iOSVer, visionOSVer) @available(iOS iOSVer, tvOS iOSVer, visionOS visionOSVer, *)
 #endif
 
 // ANGLE_APPLE_AVAILABLE_XI: check if either of the 2 platforms (OSX/iOS) min verions is available:
-#define ANGLE_APPLE_AVAILABLE_XI(macVer, iOSVer) \
-    @available(macOS macVer, iOS iOSVer, tvOS iOSVer, *)
+#define ANGLE_APPLE_AVAILABLE_XI(macVer, iOSVer, visionOSVer) \
+    @available(macOS macVer, iOS iOSVer, tvOS iOSVer, visionOS visionOSVer, *)
 
 // ANGLE_APPLE_AVAILABLE_I: check if a particular iOS version is available
-#define ANGLE_APPLE_AVAILABLE_I(iOSVer) @available(iOS iOSVer, tvOS iOSVer, *)
+#define ANGLE_APPLE_AVAILABLE_I(iOSVer, visionOSVer) @available(iOS iOSVer, tvOS iOSVer, visionOS visionOSVer, *)
 
 #if TARGET_OS_IPHONE
 #    if !defined(__IPHONE_11_0)
diff --git a/src/common/platform.h b/src/common/platform.h
index 16eb8ddcd..610c9eeda 100644
--- a/src/common/platform.h
+++ b/src/common/platform.h
@@ -152,6 +152,8 @@
 #                error tvOS 17 SDK or newer is required.
 #            endif
 #            define ANGLE_PLATFORM_APPLETV 1
+#        elif TARGET_OS_VISION
+#            define ANGLE_PLATFORM_VISION 1
 #        endif
 #    endif
 #endif
diff --git a/src/libANGLE/renderer/metal/ContextMtl.mm b/src/libANGLE/renderer/metal/ContextMtl.mm
index af75302bf..48ec1d9dd 100644
--- a/src/libANGLE/renderer/metal/ContextMtl.mm
+++ b/src/libANGLE/renderer/metal/ContextMtl.mm
@@ -221,7 +221,7 @@ ContextMtl::ContextMtl(const gl::State &state,
       mProvokingVertexHelper(this),
       mContextDevice(GetOwnershipIdentity(attribs))
 {
-    if (@available(iOS 12.0, macOS 10.14, *))
+    if (@available(iOS 12.0, macOS 10.14, visionOS 1.0, *))
     {
         mHasMetalSharedEvents = true;
     }
diff --git a/src/libANGLE/renderer/metal/DisplayMtl.mm b/src/libANGLE/renderer/metal/DisplayMtl.mm
index b9568e0dd..21f7ea184 100644
--- a/src/libANGLE/renderer/metal/DisplayMtl.mm
+++ b/src/libANGLE/renderer/metal/DisplayMtl.mm
@@ -757,7 +757,7 @@ void DisplayMtl::ensureCapsInitialized() const
     // for now. http://anglebug.com/42263403
 
     // NOTE(kpiddington): This seems to be fixed in macOS Monterey
-    if (ANGLE_APPLE_AVAILABLE_XCI(12.0, 15.0, 15.0))
+    if (ANGLE_APPLE_AVAILABLE_XCI(12.0, 15.0, 15.0, 1.0))
     {
         mNativeCaps.maxAliasedPointSize = 511;
     }
@@ -916,7 +916,7 @@ void DisplayMtl::ensureCapsInitialized() const
     mNativeLimitations.squarePvrtc1 = true;
 
     // Older Metal does not support compressed formats for TEXTURE_3D target.
-    if (ANGLE_APPLE_AVAILABLE_XCI(10.15, 13.1, 13.0))
+    if (ANGLE_APPLE_AVAILABLE_XCI(10.15, 13.1, 13.0, 1.0))
     {
         mNativeLimitations.noCompressedTexture3D = !supportsEitherGPUFamily(3, 1);
     }
@@ -953,7 +953,7 @@ void DisplayMtl::initializeExtensions() const
     mNativeExtensions.copyCompressedTextureCHROMIUM = false;
     mNativeExtensions.textureMirrorClampToEdgeEXT   = true;
 
-    if (ANGLE_APPLE_AVAILABLE_XCI(10.11, 13.1, 11.0))
+    if (ANGLE_APPLE_AVAILABLE_XCI(10.11, 13.1, 11.0, 1.0))
     {
         mNativeExtensions.depthClampEXT = true;
     }
@@ -1017,7 +1017,7 @@ void DisplayMtl::initializeExtensions() const
 
     mNativeExtensions.sampleVariablesOES = true;
 
-    if (ANGLE_APPLE_AVAILABLE_XCI(11.0, 14.0, 14.0))
+    if (ANGLE_APPLE_AVAILABLE_XCI(11.0, 14.0, 14.0, 1.0))
     {
         mNativeExtensions.shaderMultisampleInterpolationOES =
             [mMetalDevice supportsPullModelInterpolation];
@@ -1090,7 +1090,7 @@ void DisplayMtl::initializeExtensions() const
     mNativeExtensions.provokingVertexANGLE = true;
 
     // GL_EXT_blend_func_extended
-    if (ANGLE_APPLE_AVAILABLE_XCI(10.12, 13.1, 11.0))
+    if (ANGLE_APPLE_AVAILABLE_XCI(10.12, 13.1, 11.0, 1.0))
     {
         mNativeExtensions.blendFuncExtendedEXT = true;
         mNativeCaps.maxDualSourceDrawBuffers   = 1;
@@ -1391,7 +1391,7 @@ bool DisplayMtl::supportsEitherGPUFamily(uint8_t iOSFamily, uint8_t macFamily) c
 
 bool DisplayMtl::supportsMetal2_1() const
 {
-    if (ANGLE_APPLE_AVAILABLE_XCI(10.14, 13.1, 12.0))
+    if (ANGLE_APPLE_AVAILABLE_XCI(10.14, 13.1, 12.0, 1.0))
     {
         return true;
     }
@@ -1402,7 +1402,7 @@ bool DisplayMtl::supportsMetal2_1() const
 }
 bool DisplayMtl::supportsMetal2_2() const
 {
-    if (ANGLE_APPLE_AVAILABLE_XCI(10.15, 13.1, 13.0))
+    if (ANGLE_APPLE_AVAILABLE_XCI(10.15, 13.1, 13.0, 1.0))
     {
         return true;
     }
diff --git a/src/libANGLE/renderer/metal/FrameBufferMtl.mm b/src/libANGLE/renderer/metal/FrameBufferMtl.mm
index fc6479543..32b230606 100644
--- a/src/libANGLE/renderer/metal/FrameBufferMtl.mm
+++ b/src/libANGLE/renderer/metal/FrameBufferMtl.mm
@@ -688,7 +688,7 @@ gl::FramebufferStatus FramebufferMtl::checkStatus(const gl::Context *context) co
 
 gl::FramebufferStatus FramebufferMtl::checkPackedDepthStencilAttachment() const
 {
-    if (ANGLE_APPLE_AVAILABLE_XCI(10.14, 13.1, 12.0))
+    if (ANGLE_APPLE_AVAILABLE_XCI(10.14, 13.1, 12.0, 1.0))
     {
         // If depth/stencil attachment has depth & stencil bits, then depth & stencil must not have
         // separate attachment. i.e. They must be the same texture or one of them has no
diff --git a/src/libANGLE/renderer/metal/mtl_context_device.mm b/src/libANGLE/renderer/metal/mtl_context_device.mm
index 9916d17fd..557d9d31c 100644
--- a/src/libANGLE/renderer/metal/mtl_context_device.mm
+++ b/src/libANGLE/renderer/metal/mtl_context_device.mm
@@ -131,7 +131,7 @@ void ContextDevice::setOwnerWithIdentity(id<MTLResource> resource) const
 
 bool ContextDevice::hasUnifiedMemory() const
 {
-    if (@available(iOS 13.0, macOS 10.15, macCatalyst 13.1, tvOS 13.0, *))
+    if (@available(iOS 13.0, macOS 10.15, macCatalyst 13.1, tvOS 13.0, visionOS 1.0, *))
     {
         return [get() hasUnifiedMemory];
     }
diff --git a/src/libANGLE/renderer/metal/mtl_utils.mm b/src/libANGLE/renderer/metal/mtl_utils.mm
index 2265bb0be..64d4382d0 100644
--- a/src/libANGLE/renderer/metal/mtl_utils.mm
+++ b/src/libANGLE/renderer/metal/mtl_utils.mm
@@ -189,7 +189,7 @@ void StartFrameCapture(id<MTLDevice> metalDevice, id<MTLCommandQueue> metalCmdQu
     }
 
 #    ifdef __MAC_10_15
-    if (ANGLE_APPLE_AVAILABLE_XCI(10.15, 13.1, 13))
+    if (ANGLE_APPLE_AVAILABLE_XCI(10.15, 13.1, 13, 1.0))
     {
         auto captureDescriptor = mtl::adoptObjCObj([[MTLCaptureDescriptor alloc] init]);
         captureDescriptor.get().captureObject = metalDevice;
@@ -222,7 +222,7 @@ void StartFrameCapture(id<MTLDevice> metalDevice, id<MTLCommandQueue> metalCmdQu
     }
     else
 #    endif  // __MAC_10_15
-        if (ANGLE_APPLE_AVAILABLE_XCI(10.15, 13.1, 13))
+        if (ANGLE_APPLE_AVAILABLE_XCI(10.15, 13.1, 13, 1.0))
         {
             auto captureDescriptor = mtl::adoptObjCObj([[MTLCaptureDescriptor alloc] init]);
             captureDescriptor.get().captureObject = metalDevice;
diff --git a/src/tests/test_utils/angle_test_instantiate_apple.mm b/src/tests/test_utils/angle_test_instantiate_apple.mm
index 4fa6ff2cf..738b4abbc 100644
--- a/src/tests/test_utils/angle_test_instantiate_apple.mm
+++ b/src/tests/test_utils/angle_test_instantiate_apple.mm
@@ -18,7 +18,7 @@ bool IsMetalTextureSwizzleAvailable()
 {
     // NOTE(hqle): This might not be accurate, since the capabilities also depend on underlying
     // hardwares, however, it is OK for testing.
-    if (ANGLE_APPLE_AVAILABLE_XCI(10.15, 13.1, 13))
+    if (ANGLE_APPLE_AVAILABLE_XCI(10.15, 13.1, 13, 1.0))
     {
         // All NVIDIA and older Intel don't support swizzle because they are GPU family 1.
         // We don't have a way to detect Metal family here, so skip all Intel for now.
@@ -29,7 +29,7 @@ bool IsMetalTextureSwizzleAvailable()
 
 bool IsMetalCompressedTexture3DAvailable()
 {
-    if (ANGLE_APPLE_AVAILABLE_XCI(10.15, 13.1, 13.0))
+    if (ANGLE_APPLE_AVAILABLE_XCI(10.15, 13.1, 13.0, 1.0))
     {
         return true;
     }
